---
//Import relevant dependencies
import VertNavLink from "@/components/ui/links/VertNavLink.astro";
import BrandLogo from "@components/BrandLogo.astro";
import ThemeIcon from "@components/ThemeIcon.astro";
import NavLink from "@components/ui/links/NavLink.astro";
import strings from "@utils/navigation.ts";
import Authentication from "../misc/Authentication.astro";
// import LanguagePicker from "@components/ui/LanguagePicker.astro";

// Select the correct translation based on the page's lang prop:
const homeUrl = "/";
---

<!-- Main header component -->
<header
  class="fixed inset-x-0 top-0 z-50 flex w-full flex-wrap text-sm md:top-4 md:flex-nowrap md:justify-start"
>
  <!-- Navigation container -->
  <nav
    class="relative flex w-full justify-between border border-yellow-100/40 bg-yellow-50/60 px-4 py-3 backdrop-blur-md dark:border-neutral-700/40 dark:bg-neutral-800/80 dark:backdrop-blur-md md:mx-4 md:flex md:items-center md:justify-between md:rounded-[36px] md:px-6 md:py-0 lg:px-8"
    aria-label="Global"
  >
    <div class="flex flex-1 items-center justify-between">
      <span class="me-8 inline-flex gap-8 md:hidden">
        <Authentication />
        <ThemeIcon />
      </span>
      <a
        class="ms-auto flex flex-row-reverse items-center gap-3 text-nowrap rounded-lg text-xl font-bold outline-none ring-zinc-500 focus-visible:ring dark:ring-zinc-200 dark:focus:outline-none md:ms-0 md:flex-row"
        href={homeUrl}
        aria-label="Brand"
      >
        <BrandLogo class="h-12 w-12" />
        <span class="hidden sm:inline"> طلا و جواهر جروقی </span>
      </a>
    </div>
    <!-- Contains navigation links -->
    <div
      class="hidden grow basis-full overflow-hidden transition-all duration-300 md:block"
    >
      <!-- Navigation links container -->
      <div
        class="mt-5 flex flex-col gap-x-0 gap-y-4 md:mt-0 md:flex-row md:items-center md:justify-end md:gap-x-4 md:gap-y-0 md:ps-7 lg:gap-x-7"
      >
        <!-- Navigation links and Authentication component -->
        {
          strings.navBarLinks.map((link) => (
            <NavLink url={link.url} name={link.name} />
          ))
        }
        <div class="md:ms-auto">
          <Authentication />
        </div>

        <span class="hidden md:inline-block">
          <ThemeIcon />
        </span>
      </div>
    </div>
  </nav>
</header>
<!-- buttom nav -->
<nav
  class="fixed bottom-[-1px] left-0 flex w-[100vw] justify-evenly rounded-t-lg bg-neutral-100 pt-4 drop-shadow-xl dark:bg-neutral-800 md:hidden"
>
  {
    strings.navBarLinks.map((link) => (
      <VertNavLink url={link.url} name={link.name} icon="home" />
    ))
  }
</nav>
<!-- Theme Appearance script to manage light/dark modes -->
<script is:inline>
  const HSThemeAppearance = {
    init() {
      const defaultTheme = "default";
      let theme = localStorage.getItem("hs_theme") || defaultTheme;

      if (document.querySelector("html").classList.contains("dark")) return;
      this.setAppearance(theme);
    },
    _resetStylesOnLoad() {
      const $resetStyles = document.createElement("style");
      $resetStyles.innerText = `*{transition: unset !important;}`;
      $resetStyles.setAttribute("data-hs-appearance-onload-styles", "");
      document.head.appendChild($resetStyles);
      return $resetStyles;
    },
    setAppearance(theme, saveInStore = true, dispatchEvent = true) {
      const $resetStylesEl = this._resetStylesOnLoad();

      if (saveInStore) {
        localStorage.setItem("hs_theme", theme);
      }

      if (theme === "auto") {
        theme = window.matchMedia("(prefers-color-scheme: dark)").matches
          ? "dark"
          : "default";
      }

      document.querySelector("html").classList.remove("dark");
      document.querySelector("html").classList.remove("default");
      document.querySelector("html").classList.remove("auto");

      document
        .querySelector("html")
        .classList.add(this.getOriginalAppearance());

      setTimeout(() => {
        $resetStylesEl.remove();
      });

      if (dispatchEvent) {
        window.dispatchEvent(
          new CustomEvent("on-hs-appearance-change", { detail: theme })
        );
      }
    },
    getAppearance() {
      let theme = this.getOriginalAppearance();
      if (theme === "auto") {
        theme = window.matchMedia("(prefers-color-scheme: dark)").matches
          ? "dark"
          : "default";
      }
      return theme;
    },
    getOriginalAppearance() {
      const defaultTheme = "default";
      return localStorage.getItem("hs_theme") || defaultTheme;
    },
  };
  HSThemeAppearance.init();

  window
    .matchMedia("(prefers-color-scheme: dark)")
    .addEventListener("change", () => {
      if (HSThemeAppearance.getOriginalAppearance() === "auto") {
        HSThemeAppearance.setAppearance("auto", false);
      }
    });

  window.addEventListener("load", () => {
    const $clickableThemes = document.querySelectorAll(
      "[data-hs-theme-click-value]"
    );
    const $switchableThemes = document.querySelectorAll(
      "[data-hs-theme-switch]"
    );

    $clickableThemes.forEach(($item) => {
      $item.addEventListener("click", () =>
        HSThemeAppearance.setAppearance(
          $item.getAttribute("data-hs-theme-click-value"),
          true,
          $item
        )
      );
    });

    $switchableThemes.forEach(($item) => {
      $item.addEventListener("change", (e) => {
        HSThemeAppearance.setAppearance(e.target.checked ? "dark" : "default");
      });

      $item.checked = HSThemeAppearance.getAppearance() === "dark";
    });

    window.addEventListener("on-hs-appearance-change", (e) => {
      $switchableThemes.forEach(($item) => {
        $item.checked = e.detail === "dark";
      });
    });
  });
</script>
<!--Import the necessary Collapse and Overlay plugins-->
<!--https://preline.co/plugins/html/collapse.htms-->
<!--https://preline.co/plugins/html/overlay.htms-->
<script>
  import "@preline/collapse/index.js";
  import "@preline/overlay/index.js";
</script>
